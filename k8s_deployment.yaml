# Deployment for the Spring Boot Backend
apiVersion: apps/v1
kind: Deployment
metadata:
  name: back-end-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: back-end
  template:
    metadata:
      labels:
        app: back-end
    spec:
      containers:
        - name: back-end
          image: arayik0530/univercity_ecosystem_backend:latest
          ports:
            - containerPort: 8090
          env:
            - name: POSTGRES_USER
              value: "arayik"
            - name: POSTGRES_PASSWORD
              value: "123456"
            - name: POSTGRES_DB
              value: "quiz_app"
          resources:
            requests:
              memory: "1024Mi"
              cpu: "500m"
            limits:
              memory: "1024Mi"
              cpu: "500m"

---
# Deployment for the React Frontend
apiVersion: apps/v1
kind: Deployment
metadata:
  name: react-app-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: react-app
  template:
    metadata:
      labels:
        app: react-app
    spec:
      containers:
        - name: react-app
          image: arayik0530/univercity_ecosystem_frontend:latest
          ports:
            - containerPort: 3000
          resources:
            requests:
              memory: "1024Mi"
              cpu: "125m"
            limits:
              memory: "1024Mi"
              cpu: "125m"

---
# Deployment for PostgreSQL
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-db-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres-db
  template:
    metadata:
      labels:
        app: postgres-db
    spec:
      containers:
        - name: postgres-db
          image: postgres:latest
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_DB
              value: "quiz_app"
            - name: POSTGRES_USER
              value: "arayik"
            - name: POSTGRES_PASSWORD
              value: "123456"
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
          resources:
            requests:
              memory: "1024Mi"
              cpu: "125m"
            limits:
              memory: "1024Mi"
              cpu: "125m"
      volumes:
        - name: postgres-data
          persistentVolumeClaim:
            claimName: postgres-pvc

---
# Persistent Volume Claim for PostgreSQL Data
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
# Service for PostgreSQL
apiVersion: v1
kind: Service
metadata:
  name: postgres-db-service
spec:
  type: NodePort
  selector:
    app: postgres-db
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
      nodePort: 30003

---
# Service for the Spring Boot Backend
apiVersion: v1
kind: Service
metadata:
  name: back-end-service
spec:
  type: NodePort
  selector:
    app: back-end
  ports:
    - protocol: TCP
      port: 8090
      targetPort: 8090
      nodePort: 30001

---
# Service for the React Frontend
apiVersion: v1
kind: Service
metadata:
  name: react-app-service
spec:
  type: NodePort
  selector:
    app: react-app
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
      nodePort: 30002

---
# ClusterRole for PVC Access
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: node-admin
rules:
  - apiGroups: [""]
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch"]

---
# ClusterRoleBinding to Grant Minikube Node Access to PVCs
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: node-minikube-pvc-binding
subjects:
  - kind: ServiceAccount
    name: default
    namespace: default
roleRef:
  kind: ClusterRole
  name: node-admin
  apiGroup: rbac.authorization.k8s.io
